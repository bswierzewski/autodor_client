/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Web, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './custom-instance';
export type GetOrdersParams = {
dateFrom: string;
dateTo: string;
};

export interface UserSettingDto {
  /** @nullable */
  auth0Id?: string | null;
  id?: number;
  /** @nullable */
  iFirmaEmail?: string | null;
  iFirmaSettingId?: number;
  /** @nullable */
  mongoDBCollection?: string | null;
  mongoDBSettingId?: number;
  /** @nullable */
  polcarDistributorCode?: string | null;
  polcarSettingId?: number;
}

export interface UpdateUserSettingCommand {
  id: number;
  iFirmaSettingId: number;
  mongoDBSettingId: number;
  polcarSettingId: number;
}

export interface UpdatePolcarSettingCommand {
  branchId: number;
  /** @minLength 1 */
  distributorCode: string;
  id: number;
  languageId: number;
  /** @minLength 1 */
  login: string;
  /** @minLength 1 */
  password: string;
}

export interface UpdateMongoDBSettingCommand {
  /** @minLength 1 */
  collectionName: string;
  id: number;
}

export interface UpdateIFirmaSettingCommand {
  /** @minLength 1 */
  fakturaKey: string;
  id: number;
  /** @minLength 1 */
  user: string;
}

export interface PolcarSettingDto {
  branchId?: number;
  /** @nullable */
  distributorCode?: string | null;
  id?: number;
  languageId?: number;
  /** @nullable */
  login?: string | null;
  /** @nullable */
  password?: string | null;
}

export interface OrderItem {
  /** @nullable */
  partName?: string | null;
  /** @nullable */
  partNumber?: string | null;
  quantity?: number;
  totalPrice?: number;
}

export interface OrderDto {
  date?: string;
  /** @nullable */
  id?: string | null;
  isSelected?: boolean;
  /** @nullable */
  items?: OrderItem[] | null;
  readonly itemsCount?: number;
  /** @nullable */
  number?: string | null;
  /** @nullable */
  person?: string | null;
  readonly totalPrice?: number;
}

export interface MongoDBSettingDto {
  /** @nullable */
  collectionName?: string | null;
  id?: number;
}

export interface IFirmaSettingDto {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  fakturaApiKey?: string | null;
  id?: number;
}

export interface CreateUserSettingCommand {
  /** @minLength 1 */
  auth0Id: string;
  iFirmaSettingId: number;
  mongoDBSettingId: number;
  polcarSettingId: number;
}

export interface CreatePolcarSettingCommand {
  branchId: number;
  /** @minLength 1 */
  distributorCode: string;
  languageId: number;
  /** @minLength 1 */
  login: string;
  /** @minLength 1 */
  password: string;
}

export interface CreateMongoDBSettingCommand {
  /** @minLength 1 */
  collectionName: string;
}

export interface CreateIFirmaSettingCommand {
  /** @minLength 1 */
  fakturaKey: string;
  /** @minLength 1 */
  user: string;
}

export interface Contractor {
  /** @nullable */
  city?: string | null;
  createdAt?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  id?: string | null;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  nip?: string | null;
  /** @nullable */
  street?: string | null;
  /** @nullable */
  zipCode?: string | null;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getContractors = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Contractor[]>(
      {url: `/api/Contractors`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContractorsQueryKey = () => {
    return [`/api/Contractors`] as const;
    }

    
export const getGetContractorsQueryOptions = <TData = Awaited<ReturnType<typeof getContractors>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractors>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContractorsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContractors>>> = ({ signal }) => getContractors(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContractors>>, TError, TData> & { queryKey: QueryKey }
}

export type GetContractorsQueryResult = NonNullable<Awaited<ReturnType<typeof getContractors>>>
export type GetContractorsQueryError = unknown

export const useGetContractors = <TData = Awaited<ReturnType<typeof getContractors>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractors>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetContractorsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getOrders = (
    params: GetOrdersParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderDto[]>(
      {url: `/api/Orders`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrdersQueryKey = (params: GetOrdersParams,) => {
    return [`/api/Orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(params: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({ signal }) => getOrders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrders>>>
export type GetOrdersQueryError = unknown

export const useGetOrders = <TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getIFirmaSettings = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IFirmaSettingDto[]>(
      {url: `/api/settings/ifirmaSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIFirmaSettingsQueryKey = () => {
    return [`/api/settings/ifirmaSettings`] as const;
    }

    
export const getGetIFirmaSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getIFirmaSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIFirmaSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIFirmaSettings>>> = ({ signal }) => getIFirmaSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSettings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetIFirmaSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getIFirmaSettings>>>
export type GetIFirmaSettingsQueryError = unknown

export const useGetIFirmaSettings = <TData = Awaited<ReturnType<typeof getIFirmaSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetIFirmaSettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createIFirmaSetting = (
    createIFirmaSettingCommand: CreateIFirmaSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/settings/ifirmaSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createIFirmaSettingCommand
    },
      options);
    }
  


export const getCreateIFirmaSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIFirmaSetting>>, TError,{data: CreateIFirmaSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createIFirmaSetting>>, TError,{data: CreateIFirmaSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createIFirmaSetting>>, {data: CreateIFirmaSettingCommand}> = (props) => {
          const {data} = props ?? {};

          return  createIFirmaSetting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateIFirmaSettingMutationResult = NonNullable<Awaited<ReturnType<typeof createIFirmaSetting>>>
    export type CreateIFirmaSettingMutationBody = CreateIFirmaSettingCommand
    export type CreateIFirmaSettingMutationError = unknown

    export const useCreateIFirmaSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIFirmaSetting>>, TError,{data: CreateIFirmaSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createIFirmaSetting>>,
        TError,
        {data: CreateIFirmaSettingCommand},
        TContext
      > => {

      const mutationOptions = getCreateIFirmaSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getIFirmaSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IFirmaSettingDto>(
      {url: `/api/settings/ifirmaSettings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIFirmaSettingQueryKey = (id: number,) => {
    return [`/api/settings/ifirmaSettings/${id}`] as const;
    }

    
export const getGetIFirmaSettingQueryOptions = <TData = Awaited<ReturnType<typeof getIFirmaSetting>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIFirmaSettingQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIFirmaSetting>>> = ({ signal }) => getIFirmaSetting(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSetting>>, TError, TData> & { queryKey: QueryKey }
}

export type GetIFirmaSettingQueryResult = NonNullable<Awaited<ReturnType<typeof getIFirmaSetting>>>
export type GetIFirmaSettingQueryError = unknown

export const useGetIFirmaSetting = <TData = Awaited<ReturnType<typeof getIFirmaSetting>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIFirmaSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetIFirmaSettingQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateIFirmaSetting = (
    id: number,
    updateIFirmaSettingCommand: UpdateIFirmaSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/ifirmaSettings/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateIFirmaSettingCommand
    },
      options);
    }
  


export const getUpdateIFirmaSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIFirmaSetting>>, TError,{id: number;data: UpdateIFirmaSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateIFirmaSetting>>, TError,{id: number;data: UpdateIFirmaSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateIFirmaSetting>>, {id: number;data: UpdateIFirmaSettingCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  updateIFirmaSetting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateIFirmaSettingMutationResult = NonNullable<Awaited<ReturnType<typeof updateIFirmaSetting>>>
    export type UpdateIFirmaSettingMutationBody = UpdateIFirmaSettingCommand
    export type UpdateIFirmaSettingMutationError = unknown

    export const useUpdateIFirmaSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIFirmaSetting>>, TError,{id: number;data: UpdateIFirmaSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateIFirmaSetting>>,
        TError,
        {id: number;data: UpdateIFirmaSettingCommand},
        TContext
      > => {

      const mutationOptions = getUpdateIFirmaSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteIFirmaSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/ifirmaSettings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIFirmaSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIFirmaSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIFirmaSetting>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIFirmaSetting>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteIFirmaSetting(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIFirmaSettingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIFirmaSetting>>>
    
    export type DeleteIFirmaSettingMutationError = unknown

    export const useDeleteIFirmaSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIFirmaSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIFirmaSetting>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteIFirmaSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getMongoDBSettings = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<MongoDBSettingDto[]>(
      {url: `/api/settings/mongodbSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMongoDBSettingsQueryKey = () => {
    return [`/api/settings/mongodbSettings`] as const;
    }

    
export const getGetMongoDBSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getMongoDBSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMongoDBSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMongoDBSettings>>> = ({ signal }) => getMongoDBSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSettings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMongoDBSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getMongoDBSettings>>>
export type GetMongoDBSettingsQueryError = unknown

export const useGetMongoDBSettings = <TData = Awaited<ReturnType<typeof getMongoDBSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMongoDBSettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createMongoDBSetting = (
    createMongoDBSettingCommand: CreateMongoDBSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/settings/mongodbSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMongoDBSettingCommand
    },
      options);
    }
  


export const getCreateMongoDBSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMongoDBSetting>>, TError,{data: CreateMongoDBSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createMongoDBSetting>>, TError,{data: CreateMongoDBSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMongoDBSetting>>, {data: CreateMongoDBSettingCommand}> = (props) => {
          const {data} = props ?? {};

          return  createMongoDBSetting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMongoDBSettingMutationResult = NonNullable<Awaited<ReturnType<typeof createMongoDBSetting>>>
    export type CreateMongoDBSettingMutationBody = CreateMongoDBSettingCommand
    export type CreateMongoDBSettingMutationError = unknown

    export const useCreateMongoDBSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMongoDBSetting>>, TError,{data: CreateMongoDBSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createMongoDBSetting>>,
        TError,
        {data: CreateMongoDBSettingCommand},
        TContext
      > => {

      const mutationOptions = getCreateMongoDBSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getMongoDBSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<MongoDBSettingDto>(
      {url: `/api/settings/mongodbSettings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMongoDBSettingQueryKey = (id: number,) => {
    return [`/api/settings/mongodbSettings/${id}`] as const;
    }

    
export const getGetMongoDBSettingQueryOptions = <TData = Awaited<ReturnType<typeof getMongoDBSetting>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMongoDBSettingQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMongoDBSetting>>> = ({ signal }) => getMongoDBSetting(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSetting>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMongoDBSettingQueryResult = NonNullable<Awaited<ReturnType<typeof getMongoDBSetting>>>
export type GetMongoDBSettingQueryError = unknown

export const useGetMongoDBSetting = <TData = Awaited<ReturnType<typeof getMongoDBSetting>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMongoDBSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMongoDBSettingQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateMongoDBSetting = (
    id: number,
    updateMongoDBSettingCommand: UpdateMongoDBSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/mongodbSettings/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateMongoDBSettingCommand
    },
      options);
    }
  


export const getUpdateMongoDBSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMongoDBSetting>>, TError,{id: number;data: UpdateMongoDBSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMongoDBSetting>>, TError,{id: number;data: UpdateMongoDBSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMongoDBSetting>>, {id: number;data: UpdateMongoDBSettingCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMongoDBSetting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMongoDBSettingMutationResult = NonNullable<Awaited<ReturnType<typeof updateMongoDBSetting>>>
    export type UpdateMongoDBSettingMutationBody = UpdateMongoDBSettingCommand
    export type UpdateMongoDBSettingMutationError = unknown

    export const useUpdateMongoDBSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMongoDBSetting>>, TError,{id: number;data: UpdateMongoDBSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateMongoDBSetting>>,
        TError,
        {id: number;data: UpdateMongoDBSettingCommand},
        TContext
      > => {

      const mutationOptions = getUpdateMongoDBSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteMongoDBSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/mongodbSettings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMongoDBSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMongoDBSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMongoDBSetting>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMongoDBSetting>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMongoDBSetting(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMongoDBSettingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMongoDBSetting>>>
    
    export type DeleteMongoDBSettingMutationError = unknown

    export const useDeleteMongoDBSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMongoDBSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMongoDBSetting>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMongoDBSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getPolcarSettings = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PolcarSettingDto[]>(
      {url: `/api/settings/polcarSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPolcarSettingsQueryKey = () => {
    return [`/api/settings/polcarSettings`] as const;
    }

    
export const getGetPolcarSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getPolcarSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolcarSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolcarSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolcarSettings>>> = ({ signal }) => getPolcarSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolcarSettings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPolcarSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getPolcarSettings>>>
export type GetPolcarSettingsQueryError = unknown

export const useGetPolcarSettings = <TData = Awaited<ReturnType<typeof getPolcarSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolcarSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPolcarSettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createPolcarSetting = (
    createPolcarSettingCommand: CreatePolcarSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/settings/polcarSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPolcarSettingCommand
    },
      options);
    }
  


export const getCreatePolcarSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPolcarSetting>>, TError,{data: CreatePolcarSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createPolcarSetting>>, TError,{data: CreatePolcarSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPolcarSetting>>, {data: CreatePolcarSettingCommand}> = (props) => {
          const {data} = props ?? {};

          return  createPolcarSetting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePolcarSettingMutationResult = NonNullable<Awaited<ReturnType<typeof createPolcarSetting>>>
    export type CreatePolcarSettingMutationBody = CreatePolcarSettingCommand
    export type CreatePolcarSettingMutationError = unknown

    export const useCreatePolcarSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPolcarSetting>>, TError,{data: CreatePolcarSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createPolcarSetting>>,
        TError,
        {data: CreatePolcarSettingCommand},
        TContext
      > => {

      const mutationOptions = getCreatePolcarSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getPolcarSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PolcarSettingDto>(
      {url: `/api/settings/polcarSettings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPolcarSettingQueryKey = (id: number,) => {
    return [`/api/settings/polcarSettings/${id}`] as const;
    }

    
export const getGetPolcarSettingQueryOptions = <TData = Awaited<ReturnType<typeof getPolcarSetting>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolcarSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolcarSettingQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolcarSetting>>> = ({ signal }) => getPolcarSetting(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolcarSetting>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPolcarSettingQueryResult = NonNullable<Awaited<ReturnType<typeof getPolcarSetting>>>
export type GetPolcarSettingQueryError = unknown

export const useGetPolcarSetting = <TData = Awaited<ReturnType<typeof getPolcarSetting>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolcarSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPolcarSettingQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updatePolcarSetting = (
    id: number,
    updatePolcarSettingCommand: UpdatePolcarSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/polcarSettings/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePolcarSettingCommand
    },
      options);
    }
  


export const getUpdatePolcarSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePolcarSetting>>, TError,{id: number;data: UpdatePolcarSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePolcarSetting>>, TError,{id: number;data: UpdatePolcarSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePolcarSetting>>, {id: number;data: UpdatePolcarSettingCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePolcarSetting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePolcarSettingMutationResult = NonNullable<Awaited<ReturnType<typeof updatePolcarSetting>>>
    export type UpdatePolcarSettingMutationBody = UpdatePolcarSettingCommand
    export type UpdatePolcarSettingMutationError = unknown

    export const useUpdatePolcarSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePolcarSetting>>, TError,{id: number;data: UpdatePolcarSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updatePolcarSetting>>,
        TError,
        {id: number;data: UpdatePolcarSettingCommand},
        TContext
      > => {

      const mutationOptions = getUpdatePolcarSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deletePolcarSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/polcarSettings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePolcarSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePolcarSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePolcarSetting>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePolcarSetting>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deletePolcarSetting(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePolcarSettingMutationResult = NonNullable<Awaited<ReturnType<typeof deletePolcarSetting>>>
    
    export type DeletePolcarSettingMutationError = unknown

    export const useDeletePolcarSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePolcarSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePolcarSetting>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeletePolcarSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUserSettings = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserSettingDto[]>(
      {url: `/api/settings/userSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserSettingsQueryKey = () => {
    return [`/api/settings/userSettings`] as const;
    }

    
export const getGetUserSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSettings>>> = ({ signal }) => getUserSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSettings>>>
export type GetUserSettingsQueryError = unknown

export const useGetUserSettings = <TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserSettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createUserSetting = (
    createUserSettingCommand: CreateUserSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/settings/userSettings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserSettingCommand
    },
      options);
    }
  


export const getCreateUserSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserSetting>>, TError,{data: CreateUserSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createUserSetting>>, TError,{data: CreateUserSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserSetting>>, {data: CreateUserSettingCommand}> = (props) => {
          const {data} = props ?? {};

          return  createUserSetting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserSettingMutationResult = NonNullable<Awaited<ReturnType<typeof createUserSetting>>>
    export type CreateUserSettingMutationBody = CreateUserSettingCommand
    export type CreateUserSettingMutationError = unknown

    export const useCreateUserSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserSetting>>, TError,{data: CreateUserSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createUserSetting>>,
        TError,
        {data: CreateUserSettingCommand},
        TContext
      > => {

      const mutationOptions = getCreateUserSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUserSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserSettingDto>(
      {url: `/api/settings/userSettings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserSettingQueryKey = (id: number,) => {
    return [`/api/settings/userSettings/${id}`] as const;
    }

    
export const getGetUserSettingQueryOptions = <TData = Awaited<ReturnType<typeof getUserSetting>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSettingQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSetting>>> = ({ signal }) => getUserSetting(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSetting>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserSettingQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSetting>>>
export type GetUserSettingQueryError = unknown

export const useGetUserSetting = <TData = Awaited<ReturnType<typeof getUserSetting>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserSettingQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateUserSetting = (
    id: number,
    updateUserSettingCommand: UpdateUserSettingCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/userSettings/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserSettingCommand
    },
      options);
    }
  


export const getUpdateUserSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserSetting>>, TError,{id: number;data: UpdateUserSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserSetting>>, TError,{id: number;data: UpdateUserSettingCommand}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserSetting>>, {id: number;data: UpdateUserSettingCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserSetting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserSettingMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserSetting>>>
    export type UpdateUserSettingMutationBody = UpdateUserSettingCommand
    export type UpdateUserSettingMutationError = unknown

    export const useUpdateUserSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserSetting>>, TError,{id: number;data: UpdateUserSettingCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateUserSetting>>,
        TError,
        {id: number;data: UpdateUserSettingCommand},
        TContext
      > => {

      const mutationOptions = getUpdateUserSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteUserSetting = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/settings/userSettings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserSetting>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserSetting>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUserSetting(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserSettingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserSetting>>>
    
    export type DeleteUserSettingMutationError = unknown

    export const useDeleteUserSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserSetting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserSetting>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
